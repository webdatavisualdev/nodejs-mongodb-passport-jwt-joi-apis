const basicPoints = [ -3.43523445e+01, -4.67217216e+01, 3.45922119e+02,
       -4.12166519e+01, -2.88623219e+01, 3.43394775e+02, -4.31082687e+01,
       -1.09265890e+01, 3.45617859e+02, -4.01917000e+01, 1.47404814e+01,
       3.48884827e+02, -2.77967358e+01, 4.53380127e+01, 3.45813690e+02,
       -1.00579987e+01, 6.39517899e+01, 3.26304321e+02, 1.36681833e+01,
       6.98071747e+01, 3.12483612e+02, 4.08127136e+01, 6.50581741e+01,
       3.21929230e+02, 6.41874161e+01, 4.41359406e+01, 3.41441406e+02,
       7.82038345e+01, 1.39502907e+01, 3.41988068e+02, 8.20267105e+01,
       -8.71383476e+00, 3.38124146e+02, 8.00112991e+01, -2.44361858e+01,
       3.40681854e+02, 7.72670288e+01, -3.95615463e+01, 3.39852448e+02,
       4.57398796e+01, -1.11870247e+02, 3.25775513e+02, 2.05849628e+01,
       -1.20985229e+02, 3.25962311e+02, -5.01296663e+00, -1.16123901e+02,
       3.28521576e+02, -8.45757580e+00, -6.83583069e+01, 3.13637451e+02,
       -2.29384670e+01, -6.93704910e+01, 3.21467255e+02, -3.21295280e+01,
       -5.87820053e+01, 3.31495422e+02, -2.16389065e+01, -6.25498390e+01,
       3.22688599e+02, -7.37179327e+00, -6.13857384e+01, 3.19939056e+02,
       5.92052078e+00, -5.99940071e+01, 3.15594482e+02, 3.50440826e+01,
       -5.67786942e+01, 3.14722260e+02, 5.07337799e+01, -6.31751289e+01,
       3.12764069e+02, 6.56901703e+01, -6.24687881e+01, 3.18622955e+02,
       7.52534637e+01, -4.99565048e+01, 3.26926697e+02, 6.43290100e+01,
       -5.51232986e+01, 3.18964081e+02, 4.97764511e+01, -5.59791222e+01,
       3.17026947e+02, 5.31057816e+01, -5.00211601e+01, 3.20590912e+02,
       -1.15529299e+01, -5.54997101e+01, 3.23579254e+02, 1.67161226e+00,
       -4.41051712e+01, 3.30293182e+02, -4.76449251e+00, -4.91651001e+01,
       3.26713013e+02, -1.17021847e+01, -5.11525917e+01, 3.24979492e+02,
       -1.69859314e+01, -4.91069260e+01, 3.27045837e+02, -2.18008728e+01,
       -4.52496605e+01, 3.31910156e+02, -1.61996174e+01, -4.10319862e+01,
       3.30525879e+02, -1.08668566e+01, -3.96958466e+01, 3.28955200e+02,
       -4.83962488e+00, -4.08614273e+01, 3.28641754e+02, -1.06645813e+01,
       -4.62024422e+01, 3.26773071e+02, 5.21817169e+01, -4.09684792e+01,
       3.24253052e+02, 3.78150024e+01, -4.13926239e+01, 3.29108887e+02,
       4.51233215e+01, -4.46974564e+01, 3.25467102e+02, 5.29969635e+01,
       -4.63081169e+01, 3.22291901e+02, 5.83520432e+01, -4.38152847e+01,
       3.23714996e+02, 6.33215675e+01, -3.83418846e+01, 3.27507660e+02,
       5.68881073e+01, -3.58858109e+01, 3.26962982e+02, 5.13403816e+01,
       -3.44812889e+01, 3.26256653e+02, 4.43791809e+01, -3.64151611e+01,
       3.27214417e+02, 2.84857197e+01, -2.18840179e+01, 3.02141754e+02,
       1.71825218e+01, -2.16470165e+01, 2.96000488e+02, 7.64165735e+00,
       -2.45405331e+01, 3.09700928e+02, 5.43668890e+00, -7.18581772e+00,
       3.05843384e+02, 1.77446461e+01, -1.09584522e+01, 2.88920990e+02,
       2.84432964e+01, -5.06648731e+00, 3.04965424e+02, 3.85750237e+01,
       -7.84169865e+00, 3.17693390e+02, 3.14771690e+01, -8.48808467e-01,
       3.14371948e+02, 1.60479546e+01, -1.38162106e-01, 3.06975555e+02,
       1.35771024e+00, -3.87310433e+00, 3.16805481e+02, -4.14670134e+00,
       -1.15169868e+01, 3.20963165e+02, -1.11856861e+01, 2.01412487e+01,
       3.21837738e+02, -1.74997342e+00, 1.38018932e+01, 3.13885162e+02,
       8.45712948e+00, 1.15570316e+01, 3.09032745e+02, 1.56598978e+01,
       1.22983627e+01, 3.08357727e+02, 2.23103943e+01, 1.23159475e+01,
       3.08186401e+02, 3.22190018e+01, 1.64743137e+01, 3.11960205e+02,
       4.04048920e+01, 2.41437283e+01, 3.20747986e+02, 2.73351078e+01,
       2.06517105e+01, 3.12171143e+02, 1.50536242e+01, 1.94138756e+01,
       3.10210144e+02, 2.98115921e+00, 1.86943016e+01, 3.14606964e+02,
       2.75372696e+00, 2.09679852e+01, 3.14725677e+02, 1.47106724e+01,
       2.36253071e+01, 3.09246429e+02, 2.72971134e+01, 2.31440411e+01,
       3.11248108e+02, 3.37417030e+01, 2.99994450e+01, 3.14531433e+02,
       2.54702148e+01, 3.17598190e+01, 3.10809113e+02, 1.46723108e+01,
       3.21021805e+01, 3.10300598e+02, 2.94060326e+00, 3.00104847e+01,
       3.12969513e+02, -4.83618450e+00, 2.63310108e+01, 3.19570648e+02 ];

class Point {
  constructor(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
};

class Analyze {
  constructor(matrixArray) {
    this.basicMatrix = [];
    this.matrix = [];
    for(let i = 0; i < matrixArray.length; i += 3) {
      this.basicMatrix.push(new Point(basicPoints[i], basicPoints[i + 1], basicPoints[i + 2]));
      this.matrix.push(new Point(parseFloat(matrixArray[i]), parseFloat(matrixArray[i + 1]), parseFloat(matrixArray[i + 2])));
    }
  }

  euclideanDistance(p1, p2) {
    return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2 + (p1.z - p2.z) ** 2);
  }

  calcPercent(id1, id2) {
    const val1 = this.euclideanDistance(this.basicMatrix[id1], this.basicMatrix[id2]);
    const val2 = this.euclideanDistance(this.matrix[id1], this.matrix[id2]);
    return val2 / val1 * 100.0;
  }

  checkSimilarity() {
    const eyes = this.calcPercent(38, 39);
    const noseHeight = this.calcPercent(38, 52);
    const lips = this.calcPercent(67, 52);
    const noseWidth = this.calcPercent(58, 54);
    const average = (eyes + noseHeight + lips + noseWidth) / 4;
    return [
      100 - Math.abs(eyes - average),
      100 - Math.abs(noseHeight - average),
      100 - Math.abs(lips - average),
      100 - Math.abs(noseWidth - average),
    ];
  }

  similarityError() {
    const minValue = Math.min(...this.checkSimilarity());
    return minValue;
  }
};

module.exports = Analyze;
